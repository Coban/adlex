'use client'

import React, { useState, useEffect } from 'react'
import { createClient } from '@/lib/supabase/client'
// import { useAuth } from '@/contexts/AuthContext'
import type { User, Session } from '@supabase/supabase-js'

interface TokenInfo {
  hasToken: boolean
  tokenLength: number
  expiresAt?: number
  userId?: string
}

export default function AuthDebugPage(): React.JSX.Element {
  const [supabase] = useState(() => createClient())
  // const { user: contextUser, loading: contextLoading } = useAuth()
  const contextUser = null as User | null
  const contextLoading = false
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)
  const [sessionInfo, setSessionInfo] = useState<Session | null>(null)
  const [tokenInfo, setTokenInfo] = useState<TokenInfo | null>(null)
  const [debugInfo, setDebugInfo] = useState<string>('')
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  useEffect(() => {
    if (!mounted) return

    const initAuth = async () => {
      try {
        setDebugInfo('→ 認証状態確認中...')
        console.log('Initializing auth state...')
        console.log('AuthContext状態:', { contextUser, contextLoading })
        
        // ユーザー情報を取得
        const { data: { user }, error: userError } = await supabase.auth.getUser()
        console.log('Get user response:', { user, userError })
        setUser(user)
        
        // セッション情報を取得
        const { data: { session }, error: sessionError } = await supabase.auth.getSession()
        console.log('Get session response:', { session, sessionError })
        setSessionInfo(session)
        
        if (session?.access_token) {
          setTokenInfo({
            hasToken: true,
            tokenLength: session.access_token.length,
            expiresAt: session.expires_at,
            userId: session.user?.id
          })
        }
        
        setDebugInfo(prev => prev + `\n✓ 認証状態確認完了: ${user ? 'ログイン済み' : '未ログイン'}`)
        setDebugInfo(prev => prev + `\n✓ セッション状態: ${session ? 'あり' : 'なし'}`)
        setDebugInfo(prev => prev + `\n✓ AuthContext状態: ${contextUser ? 'ログイン済み' : '未ログイン'}`)
        
        // LocalStorageの認証情報も確認
        const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'http://127.0.0.1:54321'
        const storageKey = `sb-${supabaseUrl.split('//')[1]}-auth-token`
        const storedAuth = localStorage.getItem(storageKey)
        setDebugInfo(prev => prev + `\n✓ localStorage認証: ${storedAuth ? 'あり' : 'なし'}`)
        
        setLoading(false)
      } catch (error) {
        console.error('Auth init error:', error)
        setDebugInfo(prev => prev + `\n✗ 認証エラー: ${error}`)
        setLoading(false)
      }
    }

    initAuth()

    // 認証状態の変更を監視
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      console.log('Auth state change:', { event, session })
      setUser(session?.user ?? null)
      setSessionInfo(session)
      setDebugInfo(prev => prev + `\n→ 認証状態変更: ${event} - ${session?.user ? 'ログイン' : 'ログアウト'}`)
      
      if (session?.access_token) {
        setTokenInfo({
          hasToken: true,
          tokenLength: session.access_token.length,
          expiresAt: session.expires_at,
          userId: session.user?.id
        })
      } else {
        setTokenInfo(null)
      }
    })

    return () => subscription.unsubscribe()
  }, [supabase, mounted])

  const signInAnonymously = async () => {
    try {
      setDebugInfo(prev => prev + '\n→ 匿名ログイン試行中...')
      console.log('Starting anonymous sign in...')
      
      // ログイン前の状態を記録
      const { data: { session: beforeSession } } = await supabase.auth.getSession()
      setDebugInfo(prev => prev + `\n  ログイン前セッション: ${beforeSession ? 'あり' : 'なし'}`)
      
      const { data, error } = await supabase.auth.signInAnonymously()
      
      console.log('Anonymous sign in response:', { data, error })
      
      if (error) {
        setDebugInfo(prev => prev + `\n✗ 匿名ログインエラー: ${error.message}`)
        console.error('Anonymous sign in error:', error)
      } else {
        setDebugInfo(prev => prev + `\n✓ 匿名ログイン成功: ${data.user?.id}`)
        console.log('Anonymous sign in successful:', data.user)
        
        // 複数回セッション状態を確認
        for (let i = 0; i < 3; i++) {
          await new Promise(resolve => setTimeout(resolve, 500 * (i + 1))) // 0.5秒、1秒、1.5秒待機
          
          const { data: { session }, error: sessionError } = await supabase.auth.getSession()
          if (sessionError) {
            setDebugInfo(prev => prev + `\n⚠ セッション確認${i + 1}エラー: ${sessionError.message}`)
          } else {
            setDebugInfo(prev => prev + `\n✓ セッション確認${i + 1}: ${session ? `あり(${session.user?.id})` : 'なし'}`)
            
            if (session) {
              setSessionInfo(session)
              if (session?.access_token) {
                setTokenInfo({
                  hasToken: true,
                  tokenLength: session.access_token.length,
                  expiresAt: session.expires_at,
                  userId: session.user?.id
                })
              }
              break // セッションが見つかったら終了
            }
          }
        }

        // LocalStorageの確認
        const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'http://127.0.0.1:54321'
        const storageKey = `sb-${supabaseUrl.split('//')[1]}-auth-token`
        const storedAuth = localStorage.getItem(storageKey)
        setDebugInfo(prev => prev + `\n  localStorage確認: ${storedAuth ? 'あり' : 'なし'}`)
        
        // AuthContextの状態も確認
        setDebugInfo(prev => prev + `\n  AuthContext状態: ${contextUser ? `あり(${contextUser.id})` : 'なし'}`)
      }
    } catch (error) {
      console.error('Anonymous sign in exception:', error)
      setDebugInfo(prev => prev + `\n✗ 匿名ログイン例外: ${error}`)
    }
  }

  const signUpWithEmail = async () => {
    if (!email || !password) {
      setDebugInfo(prev => prev + '\n✗ メールアドレスとパスワードを入力してください')
      return
    }

    try {
      setDebugInfo(prev => prev + '\n→ メールサインアップ試行中...')
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
      })
      
      if (error) {
        setDebugInfo(prev => prev + `\n✗ サインアップエラー: ${error.message}`)
      } else {
        setDebugInfo(prev => prev + `\n✓ サインアップ成功: ${data.user?.id}`)
        setEmail('')
        setPassword('')
      }
    } catch (error) {
      setDebugInfo(prev => prev + `\n✗ サインアップ例外: ${error}`)
    }
  }

  const signInWithEmail = async () => {
    if (!email || !password) {
      setDebugInfo(prev => prev + '\n✗ メールアドレスとパスワードを入力してください')
      return
    }

    try {
      setDebugInfo(prev => prev + '\n→ メールサインイン試行中...')
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      })
      
      if (error) {
        setDebugInfo(prev => prev + `\n✗ サインインエラー: ${error.message}`)
      } else {
        setDebugInfo(prev => prev + `\n✓ サインイン成功: ${data.user?.id}`)
        setEmail('')
        setPassword('')
      }
    } catch (error) {
      setDebugInfo(prev => prev + `\n✗ サインイン例外: ${error}`)
    }
  }

  const signOut = async () => {
    try {
      setDebugInfo(prev => prev + '\n→ サインアウト中...')
      const { error } = await supabase.auth.signOut()
      
      if (error) {
        setDebugInfo(prev => prev + `\n✗ サインアウトエラー: ${error.message}`)
      } else {
        setDebugInfo(prev => prev + '\n✓ サインアウト成功')
        setSessionInfo(null)
        setTokenInfo(null)
      }
    } catch (error) {
      setDebugInfo(prev => prev + `\n✗ サインアウト例外: ${error}`)
    }
  }

  const testAPICall = async () => {
    try {
      setDebugInfo(prev => prev + '\n→ APIテスト中...')
      
      const session = await supabase.auth.getSession()
      const token = session.data.session?.access_token

      if (!token) {
        setDebugInfo(prev => prev + '\n✗ 認証トークンが見つかりません')
        return
      }

      const response = await fetch('/api/checks', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          text: 'テストメッセージ',
          type: 'test'
        })
      })

      if (response.ok) {
        const result = await response.json()
        setDebugInfo(prev => prev + `\n✓ API呼び出し成功: ${result.id}`)
      } else {
        const error = await response.text()
        setDebugInfo(prev => prev + `\n✗ API呼び出し失敗 (${response.status}): ${error}`)
      }
    } catch (error) {
      setDebugInfo(prev => prev + `\n✗ API呼び出し例外: ${error}`)
    }
  }

  const clearDebugInfo = () => {
    setDebugInfo('')
  }

  const checkLocalStorage = () => {
    try {
      const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'http://127.0.0.1:54321'
      const storageKey = `sb-${supabaseUrl.split('//')[1]}-auth-token`
      const storedAuth = localStorage.getItem(storageKey)
      
      setDebugInfo(prev => prev + `\n→ LocalStorage確認: キー = ${storageKey}`)
      setDebugInfo(prev => prev + `\n→ LocalStorage値: ${storedAuth ? '存在' : '不存在'}`)
      
      if (storedAuth) {
        try {
          const parsed = JSON.parse(storedAuth)
          setDebugInfo(prev => prev + `\n→ パース結果: ${JSON.stringify(parsed, null, 2)}`)
        } catch (parseError) {
          setDebugInfo(prev => prev + `\n✗ パースエラー: ${parseError}`)
        }
      }
    } catch (error) {
      setDebugInfo(prev => prev + `\n✗ LocalStorage確認エラー: ${error}`)
    }
  }

  const checkUserInDatabase = async () => {
    try {
      setDebugInfo(prev => prev + '\n→ データベース内ユーザー確認中...')
      
      if (!user) {
        setDebugInfo(prev => prev + '\n✗ ログインユーザーがいません')
        return
      }

      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', user.id)
        .single()

      if (error) {
        setDebugInfo(prev => prev + `\n✗ DB確認エラー: ${error.message}`)
      } else {
        setDebugInfo(prev => prev + `\n✓ DB内ユーザー: ${JSON.stringify(data, null, 2)}`)
      }
    } catch (error) {
      setDebugInfo(prev => prev + `\n✗ DB確認例外: ${error}`)
    }
  }

  if (!mounted) {
    return <div>Loading...</div>
  }

  if (loading) {
    return (
      <div style={{
        minHeight: '100vh',
        backgroundColor: '#f9fafb',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
        <div style={{ fontSize: '18px', color: '#374151' }}>読み込み中...</div>
      </div>
    )
  }

  return (
    <div style={{
      minHeight: '100vh',
      backgroundColor: '#f9fafb',
      padding: '32px'
    }}>
      <div style={{ maxWidth: '1024px', margin: '0 auto' }}>
        {/* ページタイトル */}
        <div style={{
          marginBottom: '24px',
          padding: '16px',
          backgroundColor: 'white',
          borderRadius: '8px',
          boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'
        }}>
          <h1 style={{
            fontSize: '24px',
            fontWeight: 'bold',
            color: '#111827',
            margin: '0'
          }}>
            認証デバッグページ
          </h1>
          <p style={{
            fontSize: '14px',
            color: '#374151',
            marginTop: '4px',
            margin: '4px 0 0 0'
          }}>
            開発者向けの認証状態確認とテスト機能
          </p>
        </div>
        
        {/* 認証状態 */}
        <div style={{
          backgroundColor: 'white',
          borderRadius: '8px',
          boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',
          padding: '24px',
          marginBottom: '24px'
        }}>
          <h2 style={{
            fontSize: '20px',
            fontWeight: '600',
            color: '#1f2937',
            marginBottom: '16px'
          }}>
            認証状態
          </h2>
          
          {user && (
            <div style={{
              backgroundColor: '#eff6ff',
              border: '1px solid #3b82f6',
              borderRadius: '6px',
              padding: '12px',
              marginBottom: '16px',
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center'
            }}>
              <span style={{ color: '#1e40af', fontSize: '14px', fontWeight: '500' }}>
                🎉 ログイン成功！テキストチェック機能が利用可能です
              </span>
              <div style={{ display: 'flex', gap: '8px' }}>
                <button
                  onClick={() => window.location.href = '/checker'}
                  style={{
                    padding: '6px 12px',
                    backgroundColor: '#3b82f6',
                    color: 'white',
                    border: 'none',
                    borderRadius: '4px',
                    fontSize: '12px',
                    fontWeight: '500',
                    cursor: 'pointer'
                  }}
                >
                  テキストチェック開始
                </button>
              </div>
            </div>
          )}
          
          <div style={{ display: 'flex', flexDirection: 'column', gap: '8px', fontSize: '14px' }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
              <span style={{ fontWeight: '500' }}>直接ログイン状態:</span>
              <span style={{
                padding: '4px 8px',
                borderRadius: '4px',
                fontSize: '12px',
                fontWeight: '500',
                backgroundColor: user ? '#dcfce7' : '#fef2f2',
                color: user ? '#166534' : '#991b1b'
              }}>
                {user ? 'ログイン済み' : '未ログイン'}
              </span>
            </div>
            <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
              <span style={{ fontWeight: '500' }}>AuthContextログイン状態:</span>
              <span style={{
                padding: '4px 8px',
                borderRadius: '4px',
                fontSize: '12px',
                fontWeight: '500',
                backgroundColor: contextUser ? '#dcfce7' : '#fef2f2',
                color: contextUser ? '#166534' : '#991b1b'
              }}>
                {contextLoading ? '読み込み中' : (contextUser ? 'ログイン済み' : '未ログイン')}
              </span>
            </div>
            {user && (
              <>
                <div>
                  <span style={{ fontWeight: '500' }}>ユーザーID:</span> {user.id}
                </div>
                <div>
                  <span style={{ fontWeight: '500' }}>メール:</span> {user.email || '匿名'}
                </div>
                <div>
                  <span style={{ fontWeight: '500' }}>作成日:</span> {new Date(user.created_at).toLocaleString('ja-JP')}
                </div>
              </>
            )}
            {contextUser && contextUser.id !== user?.id && (
              <>
                <div style={{ borderTop: '1px solid #e5e7eb', paddingTop: '8px', marginTop: '8px' }}>
                  <span style={{ fontWeight: '500' }}>AuthContext ユーザーID:</span> {contextUser.id}
                </div>
                <div>
                  <span style={{ fontWeight: '500' }}>AuthContext メール:</span> {contextUser.email || '匿名'}
                </div>
              </>
            )}
          </div>
        </div>

        {/* セッション情報 */}
        <div style={{
          backgroundColor: 'white',
          borderRadius: '8px',
          boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',
          padding: '24px',
          marginBottom: '24px'
        }}>
          <h2 style={{
            fontSize: '20px',
            fontWeight: '600',
            color: '#1f2937',
            marginBottom: '16px'
          }}>
            セッション情報
          </h2>
          {sessionInfo ? (
            <div style={{ display: 'flex', flexDirection: 'column', gap: '8px', fontSize: '14px' }}>
              <div>
                <span style={{ fontWeight: '500' }}>アクセストークン:</span> あり ({tokenInfo?.tokenLength || 0}文字)
              </div>
              <div>
                <span style={{ fontWeight: '500' }}>有効期限:</span> {tokenInfo?.expiresAt ? new Date(tokenInfo.expiresAt * 1000).toLocaleString('ja-JP') : '不明'}
              </div>
              <div>
                <span style={{ fontWeight: '500' }}>リフレッシュトークン:</span> {sessionInfo.refresh_token ? 'あり' : 'なし'}
              </div>
            </div>
          ) : (
            <div style={{ color: '#374151', fontSize: '14px' }}>セッション情報なし</div>
          )}
        </div>

        {/* 操作ボタン */}
        <div style={{
          backgroundColor: 'white',
          borderRadius: '8px',
          boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',
          padding: '24px',
          marginBottom: '24px'
        }}>
          <h2 style={{
            fontSize: '20px',
            fontWeight: '600',
            color: '#1f2937',
            marginBottom: '16px'
          }}>
            操作
          </h2>
          
          {/* 匿名ログイン */}
          <div style={{ marginBottom: '24px' }}>
            <h3 style={{ fontSize: '16px', fontWeight: '500', marginBottom: '12px' }}>匿名ログイン</h3>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
              <button 
                onClick={signInAnonymously} 
                disabled={!!user}
                style={{
                  backgroundColor: user ? '#6b7280' : '#2563eb',
                  color: 'white',
                  padding: '8px 16px',
                  borderRadius: '6px',
                  fontWeight: '500',
                  border: 'none',
                  cursor: user ? 'not-allowed' : 'pointer'
                }}
              >
                匿名ログイン
              </button>
              
              {user && (
                <div style={{ 
                  display: 'flex', 
                  gap: '8px', 
                  marginTop: '8px',
                  padding: '12px',
                  backgroundColor: '#dcfce7',
                  borderRadius: '6px',
                  border: '1px solid #16a34a'
                }}>
                  <div style={{ 
                    fontSize: '14px', 
                    color: '#166534',
                    flex: '1'
                  }}>
                    ✓ ログイン成功！次のアクションを選択:
                  </div>
                  <button
                    onClick={() => window.location.href = '/'}
                    style={{
                      padding: '4px 12px',
                      backgroundColor: '#16a34a',
                      color: 'white',
                      border: 'none',
                      borderRadius: '4px',
                      fontSize: '12px',
                      cursor: 'pointer'
                    }}
                  >
                    トップページ
                  </button>
                  <button
                    onClick={() => window.location.href = '/checker'}
                    style={{
                      padding: '4px 12px',
                      backgroundColor: '#059669',
                      color: 'white',
                      border: 'none',
                      borderRadius: '4px',
                      fontSize: '12px',
                      cursor: 'pointer'
                    }}
                  >
                    テキストチェック
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* メール認証 */}
          <div style={{ marginBottom: '24px' }}>
            <h3 style={{ fontSize: '16px', fontWeight: '500', marginBottom: '12px' }}>メール認証</h3>
            <div style={{ display: 'flex', flexDirection: 'column', gap: '8px', marginBottom: '12px' }}>
              <input
                type="email"
                placeholder="メールアドレス"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                disabled={!!user}
                style={{
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px'
                }}
              />
              <input
                type="password"
                placeholder="パスワード"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                disabled={!!user}
                style={{
                  padding: '8px 12px',
                  border: '1px solid #d1d5db',
                  borderRadius: '6px',
                  fontSize: '14px'
                }}
              />
            </div>
            <div style={{ display: 'flex', gap: '8px' }}>
              <button 
                onClick={signUpWithEmail} 
                disabled={!!user}
                style={{
                  backgroundColor: user ? '#6b7280' : '#059669',
                  color: 'white',
                  padding: '8px 16px',
                  borderRadius: '6px',
                  fontWeight: '500',
                  border: 'none',
                  cursor: user ? 'not-allowed' : 'pointer'
                }}
              >
                サインアップ
              </button>
              <button 
                onClick={signInWithEmail} 
                disabled={!!user}
                style={{
                  backgroundColor: user ? '#6b7280' : '#7c3aed',
                  color: 'white',
                  padding: '8px 16px',
                  borderRadius: '6px',
                  fontWeight: '500',
                  border: 'none',
                  cursor: user ? 'not-allowed' : 'pointer'
                }}
              >
                サインイン
              </button>
            </div>
            
            {user && (
              <div style={{ 
                display: 'flex', 
                gap: '8px', 
                marginTop: '12px',
                padding: '12px',
                backgroundColor: '#dcfce7',
                borderRadius: '6px',
                border: '1px solid #16a34a'
              }}>
                <div style={{ 
                  fontSize: '14px', 
                  color: '#166534',
                  flex: '1'
                }}>
                  ✓ ログイン成功！次のアクションを選択:
                </div>
                <button
                  onClick={() => window.location.href = '/'}
                  style={{
                    padding: '4px 12px',
                    backgroundColor: '#16a34a',
                    color: 'white',
                    border: 'none',
                    borderRadius: '4px',
                    fontSize: '12px',
                    cursor: 'pointer'
                  }}
                >
                  トップページ
                </button>
                <button
                  onClick={() => window.location.href = '/checker'}
                  style={{
                    padding: '4px 12px',
                    backgroundColor: '#059669',
                    color: 'white',
                    border: 'none',
                    borderRadius: '4px',
                    fontSize: '12px',
                    cursor: 'pointer'
                  }}
                >
                  テキストチェック
                </button>
              </div>
            )}
          </div>

          {/* その他の操作 */}
          <div>
            <h3 style={{ fontSize: '16px', fontWeight: '500', marginBottom: '12px' }}>その他の操作</h3>
            <div style={{ display: 'flex', flexWrap: 'wrap', gap: '12px' }}>
              <button 
                onClick={signOut} 
                disabled={!user}
                style={{
                  backgroundColor: user ? 'white' : '#f9fafb',
                  color: user ? '#dc2626' : '#6b7280',
                  padding: '8px 16px',
                  borderRadius: '6px',
                  fontWeight: '500',
                  border: user ? '1px solid #fca5a5' : '1px solid #d1d5db',
                  cursor: user ? 'pointer' : 'not-allowed'
                }}
              >
                サインアウト
              </button>
              <button 
                onClick={testAPICall} 
                disabled={!user}
                style={{
                  backgroundColor: user ? '#059669' : '#6b7280',
                  color: 'white',
                  padding: '8px 16px',
                  borderRadius: '6px',
                  fontWeight: '500',
                  border: 'none',
                  cursor: user ? 'pointer' : 'not-allowed'
                }}
              >
                API呼び出しテスト
              </button>
              <button 
                onClick={clearDebugInfo} 
                style={{
                  backgroundColor: 'white',
                  color: '#374151',
                  padding: '8px 16px',
                  borderRadius: '6px',
                  fontWeight: '500',
                  border: '1px solid #d1d5db',
                  cursor: 'pointer'
                }}
              >
                ログクリア
              </button>
              <button 
                onClick={checkLocalStorage} 
                style={{
                  backgroundColor: 'white',
                  color: '#7c3aed',
                  padding: '8px 16px',
                  borderRadius: '6px',
                  fontWeight: '500',
                  border: '1px solid #c4b5fd',
                  cursor: 'pointer'
                }}
              >
                LocalStorage確認
              </button>
              <button 
                onClick={checkUserInDatabase} 
                disabled={!user}
                style={{
                  backgroundColor: user ? 'white' : '#f9fafb',
                  color: user ? '#0891b2' : '#6b7280',
                  padding: '8px 16px',
                  borderRadius: '6px',
                  fontWeight: '500',
                  border: user ? '1px solid #67e8f9' : '1px solid #d1d5db',
                  cursor: user ? 'pointer' : 'not-allowed'
                }}
              >
                DB確認
              </button>
            </div>
          </div>
        </div>

        {/* デバッグログ */}
        <div style={{
          backgroundColor: 'white',
          borderRadius: '8px',
          boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',
          padding: '24px'
        }}>
          <h2 style={{
            fontSize: '20px',
            fontWeight: '600',
            color: '#1f2937',
            marginBottom: '16px'
          }}>
            デバッグログ
          </h2>
          <div style={{
            backgroundColor: '#f3f4f6',
            borderRadius: '6px',
            padding: '16px',
            minHeight: '200px',
            overflow: 'auto'
          }}>
            {debugInfo ? (
              <pre style={{
                fontSize: '14px',
                color: '#1f2937',
                whiteSpace: 'pre-wrap',
                margin: 0,
                fontFamily: 'monospace'
              }}>
                {debugInfo}
              </pre>
            ) : (
              <div style={{ color: '#374151', fontSize: '14px' }}>ログなし</div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
